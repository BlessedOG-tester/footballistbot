import os
import json
import re
from datetime import datetime
from typing import Dict, Any

from telegram import Update, ChatMember
from telegram.constants import ChatType
from telegram.ext import (
    Application, ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters, ChatMemberHandler
)

# ---------- Defaults ----------
DEFAULT_FIELD = "–ì–æ—Ä–∏–∑–æ–Ω—Ç-–∞—Ä–µ–Ω–∞"
DEFAULT_TIME = "20:00-22:00"
STATE_FILE = "state.json"  # –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏: os.getenv("STATE_FILE", "/data/state.json")

WEEKDAY_RU = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥",
              "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –≥–æ—Å—Ç–µ–π –æ—Ç –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
MAX_GUESTS_PER_HOST = 5
ZWS = "\u200b"  # zero-width space

# ---------- Patterns ----------
PLUS_PATTERN = re.compile(r"^\s*(\+|‚ûï)\s*$")
MINUS_PATTERN = re.compile(r"^\s*(-|‚Äî|‚Äì|‚ûñ)\s*$")
PLUS_ONE_PATTERN = re.compile(r"^\s*(\+|‚ûï)\s*1\s*$")
MINUS_ONE_PATTERN = re.compile(r"^\s*(-|‚Äî|‚Äì|‚ûñ)\s*1\s*$")
# +N / -N (N = 2..5)
PLUS_N_PATTERN = re.compile(r"^\s*(\+|‚ûï)\s*([2-5])\s*$")
MINUS_N_PATTERN = re.compile(r"^\s*(-|‚Äî|‚Äì|‚ûñ)\s*([2-5])\s*$")

# ---------- Simple storage ----------
state: Dict[str, Dict[str, Any]] = {}

def load_state():
    global state
    if os.path.exists(STATE_FILE):
        with open(STATE_FILE, "r", encoding="utf-8") as f:
            state = json.load(f)
    else:
        state = {}

def save_state():
    with open(STATE_FILE, "w", encoding="utf-8") as f:
        json.dump(state, f, ensure_ascii=False, indent=2)

def ensure_chat(chat_id: int):
    cid = str(chat_id)
    if cid not in state:
        state[cid] = {
            "open": False,
            "date": datetime.now().strftime("%d/%m/%y"),
            "time": DEFAULT_TIME,
            "field": DEFAULT_FIELD,
            "limit": 0,
            "users": []
        }

def is_admin_member(member: ChatMember) -> bool:
    return member.status in ("administrator", "creator", "owner")

async def is_admin(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    if update.effective_chat is None or update.effective_user is None:
        return False
    try:
        member = await context.bot.get_chat_member(update.effective_chat.id, update.effective_user.id)
        return is_admin_member(member)
    except Exception:
        return False

# ---------- Helpers: guests parsing ----------
# –∑–∞–ø–∏—Å—å —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–∞–∫:
# "–ò–º—è"                  -> —Ö–æ–∑—è–∏–Ω –±–µ–∑ –≥–æ—Å—Ç–µ–π
# "–ò–º—è +N"               -> —Ö–æ–∑—è–∏–Ω —Å N –≥–æ—Å—Ç—è–º–∏
# "–ò–º—è +N{ZWS}"          -> —Ç–æ–ª—å–∫–æ –≥–æ—Å—Ç–∏ (—Ö–æ–∑—è–∏–Ω–∞ –Ω–µ—Ç), N –≥–æ—Å—Ç–µ–π

_guest_re = re.compile(r"\s\+(\d+)(\u200b)?$")

def _guest_count(entry: str) -> int:
    m = _guest_re.search(entry)
    return int(m.group(1)) if m else 0

def _is_guest_only(entry: str) -> bool:
    m = _guest_re.search(entry)
    return bool(m and m.group(2))

def _strip_guest(entry: str) -> str:
    return _guest_re.sub("", entry).strip()

def _make_entry(display: str, n: int, guest_only: bool) -> str:
    display = display.strip()
    if n <= 0:
        return display
    return f"{display} +{n}{ZWS if guest_only else ''}"

def _find_user_index(users, display_name: str, username: str | None) -> int:
    dn = display_name.lower().strip()
    un = ("@" + username.lower()) if username else None
    for i, e in enumerate(users):
        el = e.lower()
        if un and un in el:
            return i
        if _strip_guest(el) == dn:
            return i
    return -1

def _total_count(users) -> int:
    # owner+guests -> 1+N; guest-only -> N; solo -> 1
    c = 0
    for e in users:
        n = _guest_count(e)
        if n:
            c += n if _is_guest_only(e) else (1 + n)
        else:
            c += 1
    return c

def _expanded_users(users):
    """–î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: —Ö–æ–∑—è–∏–Ω–∞ –∏ –∫–∞–∂–¥–æ–≥–æ –≥–æ—Å—Ç—è –≤—ã–≤–æ–¥–∏–º –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π."""
    out = []
    for e in users:
        n = _guest_count(e)
        base = _strip_guest(e)
        if n:
            if not _is_guest_only(e):
                out.append(base)  # —Ö–æ–∑—è–∏–Ω
            out.extend([f"{base} +1"] * n)  # n —Å—Ç—Ä–æ–∫ –≥–æ—Å—Ç–µ–π
        else:
            out.append(base)
    return out

def format_header(chat_state: Dict[str, Any]) -> str:
    try:
        d = datetime.strptime(chat_state["date"], "%d/%m/%y")
        weekday = WEEKDAY_RU[d.weekday()]
    except Exception:
        weekday = "?"
    return (
        f"üìÖ {chat_state['date']} ({weekday})\n"
        f"üèüÔ∏è –ü–æ–ª–µ: {chat_state.get('field', DEFAULT_FIELD)}\n"
        f"‚è∞ –í—Ä–µ–º—è: {chat_state.get('time', DEFAULT_TIME)}"
    )

def format_list(chat_state: Dict[str, Any]) -> str:
    header = format_header(chat_state)
    users = chat_state.get("users", [])
    limit = chat_state.get("limit", 0)

    expanded = _expanded_users(users)
    count = len(expanded)

    body = "\n".join(f"{i+1}. {u}" for i, u in enumerate(expanded)) if expanded \
        else "–ü–æ–∫–∞ –ø—É—Å—Ç–æ. –ü–∏—à–∏ '+' —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è."

    cap = f"\n\n‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç ({limit})." if limit and count >= limit else ""
    status = "–û—Ç–∫—Ä—ã—Ç–æ ‚úÖ" if chat_state.get("open") else "–ó–∞–∫—Ä—ã—Ç–æ ‚õîÔ∏è"
    return f"{header}\n\n–°—Ç–∞—Ç—É—Å: {status}\n–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {count}{cap}\n\n{body}"

def display_name_from_update(update: Update) -> str:
    u = update.effective_user
    if not u:
        return "–ë–µ–∑ –∏–º–µ–Ω–∏"
    parts = []
    if u.first_name: parts.append(u.first_name)
    if u.last_name: parts.append(u.last_name)
    name = " ".join(parts) if parts else (u.username or str(u.id))
    return f"{name} (@{u.username})" if u.username else name

def parse_date(s: str) -> str:
    datetime.strptime(s, "%d/%m/%y")
    return s

def parse_time(s: str) -> str:
    if re.match(r"^\d{2}:\d{2}-\d{2}:\d{2}$", s):
        return s
    raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–∏–º–µ—Ä: 20:00-22:00")

# ---------- Commands ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat is None:
        return
    ensure_chat(update.effective_chat.id)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–µ–¥—É —Å–ø–∏—Å–æ–∫ –Ω–∞ —Ñ—É—Ç–±–æ–ª.\n"
        "–£—á–∞—Å—Ç–Ω–∏–∫–∞–º: '+', '-'; '+1'/'-1'; '+N'/'-N' (N=2..5).\n\n"
        "–ê–¥–º–∏–Ω–∞–º:\n"
        "/open [–î–î/–ú–ú/–ì–ì] [–ß–ß:–ú–ú-–ß–ß:–ú–ú]\n"
        "/setdate –î–î/–ú–ú/–ì–ì\n"
        "/settime –ß–ß:–ú–ú-–ß–ß:–ú–ú\n"
        "/setfield –¢–ï–ö–°–¢\n"
        "/setlimit N\n"
        "/remove @username|–ò–º—è\n"
        "/list\n"
        "/reset\n"
        "/close\n"
        "/help"
    )

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start(update, context)

async def open_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat is None or not await is_admin(update, context):
        return
    ensure_chat(update.effective_chat.id)
    chat_state = state[str(update.effective_chat.id)]
    args = context.args
    try:
        if len(args) >= 1:
            chat_state["date"] = parse_date(args[0])
        if len(args) >= 2:
            chat_state["time"] = parse_time(args[1])
        chat_state["open"] = True
        save_state()
        await update.message.reply_text("–ó–∞–ø–∏—Å—å –æ—Ç–∫—Ä—ã—Ç–∞ ‚úÖ\n\n" + format_list(chat_state))
    except ValueError as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

async def setdate_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat is None or not await is_admin(update, context):
        return
    ensure_chat(update.effective_chat.id)
    chat_state = state[str(update.effective_chat.id)]
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É: /setdate –î–î/–ú–ú/–ì–ì")
        return
    try:
        chat_state["date"] = parse_date(context.args[0])
        save_state()
        await update.message.reply_text("–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ ‚úÖ\n\n" + format_list(chat_state))
    except ValueError as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

async def settime_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat is None or not await is_admin(update, context):
        return
    ensure_chat(update.effective_chat.id)
    chat_state = state[str(update.effective_chat.id)]
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è: /settime –ß–ß:–ú–ú-–ß–ß:–ú–ú")
        return
    try:
        chat_state["time"] = parse_time(context.args[0])
        save_state()
        await update.message.reply_text("–í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ\n\n" + format_list(chat_state))
    except ValueError as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

async def setfield_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat is None or not await is_admin(update, context):
        return
    ensure_chat(update.effective_chat.id)
    chat_state = state[str(update.effective_chat.id)]
    text = " ".join(context.args).strip()
    if not text:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è: /setfield –ì–æ—Ä–∏–∑–æ–Ω—Ç-–∞—Ä–µ–Ω–∞")
        return
    chat_state["field"] = text
    save_state()
    await update.message.reply_text("–ü–æ–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ\n\n" + format_list(chat_state))

async def setlimit_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat is None or not await is_admin(update, context):
        return
    ensure_chat(update.effective_chat.id)
    chat_state = state[str(update.effective_chat.id)]
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –ª–∏–º–∏—Ç: /setlimit 28 (0 = –±–µ–∑ –ª–∏–º–∏—Ç–∞)")
        return
    try:
        chat_state["limit"] = max(0, int(context.args[0]))
        save_state()
        await update.message.reply_text("–õ–∏–º–∏—Ç –æ–±–Ω–æ–≤–ª—ë–Ω ‚úÖ\n\n" + format_list(chat_state))
    except Exception:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü—Ä–∏–º–µ—Ä: /setlimit 28")

async def remove_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat is None or not await is_admin(update, context):
        return
    ensure_chat(update.effective_chat.id)
    chat_state = state[str(update.effective_chat.id)]
    key = " ".join(context.args).strip()
    if not key:
        await update.message.reply_text("–ö–æ–≥–æ —É–±—Ä–∞—Ç—å? /remove @username –∏–ª–∏ /remove –ò–º—è")
        return
    before = len(chat_state["users"])
    chat_state["users"] = [u for u in chat_state["users"] if key.lower() not in u.lower()]
    removed = before - len(chat_state["users"])
    save_state()
    await update.message.reply_text(f"–£–±—Ä–∞–Ω–æ: {removed}\n\n" + format_list(chat_state))

async def list_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat is None:
        return
    ensure_chat(update.effective_chat.id)
    await update.message.reply_text(format_list(state[str(update.effective_chat.id)]))

async def reset_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat is None or not await is_admin(update, context):
        return
    ensure_chat(update.effective_chat.id)
    state[str(update.effective_chat.id)]["users"] = []
    save_state()
    await update.message.reply_text("–°–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω üßπ\n\n" + format_list(state[str(update.effective_chat.id)]))

async def close_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat is None or not await is_admin(update, context):
        return
    ensure_chat(update.effective_chat.id)
    state[str(update.effective_chat.id)]["open"] = False
    save_state()
    await update.message.reply_text("–ó–∞–ø–∏—Å—å –∑–∞–∫—Ä—ã—Ç–∞ ‚õîÔ∏è\n\n" + format_list(state[str(update.effective_chat.id)]))

# ---------- Message Handlers ----------
async def plus_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """'+': –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ–∑—è–∏–Ω–∞ (–µ—Å–ª–∏ –±—ã–ª guest-only, –≤–µ—Ä–Ω—É—Ç—å —Ö–æ–∑—è–∏–Ω–∞)."""
    if update.effective_chat is None or update.message is None:
        return
    if update.effective_chat.type not in (ChatType.GROUP, ChatType.SUPERGROUP):
        return
    ensure_chat(update.effective_chat.id)
    chat_state = state[str(update.effective_chat.id)]
    if not chat_state.get("open", False):
        await update.message.reply_text("–ó–∞–ø–∏—Å—å –∑–∞–∫—Ä—ã—Ç–∞ ‚õîÔ∏è. –ê–¥–º–∏–Ω–∞–º: /open")
        return

    users = chat_state["users"]
    limit = chat_state.get("limit", 0)
    cur = _total_count(users)
    disp = display_name_from_update(update)
    uname = update.effective_user.username if update.effective_user else None
    idx = _find_user_index(users, disp, uname)

    if idx != -1:
        entry = users[idx]
        if _is_guest_only(entry):
            # –≤–µ—Ä–Ω—É—Ç—å —Ö–æ–∑—è–∏–Ω–∞, –≥–æ—Å—Ç–µ–π –Ω–µ –º–µ–Ω—è–µ–º
            if limit and cur + 1 > limit:
                await update.message.reply_text(f"‚ö†Ô∏è –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç (–ª–∏–º–∏—Ç {limit}).")
                return
            n = _guest_count(entry)
            users[idx] = _make_entry(_strip_guest(entry), n, guest_only=False)
            save_state()
            await update.message.reply_text("–í–µ—Ä–Ω—É–ª —Ç–µ–±—è, –≥–æ—Å—Ç—å(–∏) –æ—Å—Ç–∞—é—Ç—Å—è üë•‚úÖ\n\n" + format_list(chat_state))
            return
        else:
            await update.message.reply_text("–¢—ã —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ ‚úÖ")
            return

    if limit and cur + 1 > limit:
        await update.message.reply_text(f"‚ö†Ô∏è –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç (–ª–∏–º–∏—Ç {limit}).")
        return
    users.append(_make_entry(disp, 0, False))
    save_state()
    await update.message.reply_text("–ó–∞–ø–∏—Å–∞–ª! ‚úÖ\n\n" + format_list(chat_state))

async def _plus_n_common(update: Update, n: int):
    """–û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è '+N' (–≤–∫–ª—é—á–∞—è '+1')."""
    chat = update.effective_chat
    if chat is None or update.message is None:
        return
    ensure_chat(chat.id)
    chat_state = state[str(chat.id)]
    if not chat_state.get("open", False):
        await update.message.reply_text("–ó–∞–ø–∏—Å—å –∑–∞–∫—Ä—ã—Ç–∞ ‚õîÔ∏è. –ê–¥–º–∏–Ω–∞–º: /open")
        return

    users = chat_state["users"]
    limit = chat_state.get("limit", 0)
    cur = _total_count(users)
    disp = display_name_from_update(update)
    uname = update.effective_user.username if update.effective_user else None
    idx = _find_user_index(users, disp, uname)

    if idx == -1:
        # –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ ‚Üí —Ö–æ–∑—è–∏–Ω + N –≥–æ—Å—Ç–µ–π
        if n > MAX_GUESTS_PER_HOST:
            await update.message.reply_text(f"–ú–∞–∫—Å–∏–º—É–º +{MAX_GUESTS_PER_HOST}.")
            return
        if limit and cur + (1 + n) > limit:
            await update.message.reply_text(f"‚ö†Ô∏è –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–µ—Å—Ç –¥–ª—è +{n} (–ª–∏–º–∏—Ç {limit}).")
            return
        users.append(_make_entry(disp, n, False))
        save_state()
        await update.message.reply_text(f"–ó–∞–ø–∏—Å–∞–ª —Ç–µ–±—è —Å +{n} üë•‚úÖ\n\n" + format_list(chat_state))
        return

    entry = users[idx]
    base = _strip_guest(entry)
    cur_n = _guest_count(entry)
    is_guest_only = _is_guest_only(entry)

    # —Å–∫–æ–ª—å–∫–æ –¥–æ–ø. –º–µ—Å—Ç –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–∞)
    extra_slots = n + (1 if is_guest_only else 0)

    if cur_n + n > MAX_GUESTS_PER_HOST:
        await update.message.reply_text(f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≥–æ—Å—Ç–µ–π. –£ —Ç–µ–±—è —É–∂–µ +{cur_n}. –ú–∞–∫—Å–∏–º—É–º +{MAX_GUESTS_PER_HOST}.")
        return

    if limit and cur + extra_slots > limit:
        await update.message.reply_text(f"‚ö†Ô∏è –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–µ—Å—Ç –¥–ª—è +{n} (–ª–∏–º–∏—Ç {limit}).")
        return

    new_n = cur_n + n
    users[idx] = _make_entry(base, new_n, False)  # —Ö–æ–∑—è–∏–Ω —Ç–æ—á–Ω–æ –±—É–¥–µ—Ç –ø–æ—Å–ª–µ '+N'
    save_state()
    await update.message.reply_text(f"–î–æ–±–∞–≤–∏–ª +{n} üë•‚úÖ\n\n" + format_list(chat_state))

async def plus_one_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await _plus_n_common(update, 1)

async def plus_n_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –≤—ã—Ç–∞—â–∏–º N –∏–∑ —Ç–µ–∫—Å—Ç–∞
    m = PLUS_N_PATTERN.match(update.message.text or "")
    n = int(m.group(2)) if m else 0
    if n:
        await _plus_n_common(update, n)

async def minus_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """'-': —É–±—Ä–∞—Ç—å —Ö–æ–∑—è–∏–Ω–∞. –ï—Å–ª–∏ –±—ã–ª–∏ –≥–æ—Å—Ç–∏ ‚Äî –æ—Å—Ç–∞–Ω—É—Ç—Å—è –∫–∞–∫ guest-only."""
    if update.effective_chat is None or update.message is None:
        return
    if update.effective_chat.type not in (ChatType.GROUP, ChatType.SUPERGROUP):
        return
    ensure_chat(update.effective_chat.id)
    chat_state = state[str(update.effective_chat.id)]
    users = chat_state["users"]

    disp = display_name_from_update(update)
    uname = update.effective_user.username if update.effective_user else None
    idx = _find_user_index(users, disp, uname)
    if idx == -1:
        await update.message.reply_text("–¢–µ–±—è –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ —É–¥–∞–ª—è–ª.")
        return

    entry = users[idx]
    n = _guest_count(entry)
    if n > 0 and not _is_guest_only(entry):
        users[idx] = _make_entry(_strip_guest(entry), n, True)  # –æ—Å—Ç–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≥–æ—Å—Ç–∏
        save_state()
        await update.message.reply_text("–£–±—Ä–∞–ª —Ç–µ–±—è, –≥–æ—Å—Ç–∏ –æ—Å—Ç–∞—é—Ç—Å—è üë§‚û°Ô∏èüë•\n\n" + format_list(chat_state))
        return

    if _is_guest_only(entry):
        await update.message.reply_text("–£ —Ç–µ–±—è —É–∂–µ –æ—Å—Ç–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ –≥–æ—Å—Ç–∏. –ß—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏—Ö ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π -1 –∏–ª–∏ -N.")
        return

    # –æ–±—ã—á–Ω–∞—è –∑–∞–ø–∏—Å—å –±–µ–∑ –≥–æ—Å—Ç–µ–π ‚Äî —É–¥–∞–ª—è–µ–º
    del users[idx]
    save_state()
    await update.message.reply_text("–£–±—Ä–∞–ª —Ç–µ–±—è –∏–∑ —Å–ø–∏—Å–∫–∞ üëå\n\n" + format_list(chat_state))

async def _minus_n_common(update: Update, n: int):
    """–û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è '-N' (–≤–∫–ª—é—á–∞—è '-1'): —É–±–∞–≤–∏—Ç—å –≥–æ—Å—Ç–µ–π."""
    chat = update.effective_chat
    if chat is None or update.message is None:
        return
    ensure_chat(chat.id)
    chat_state = state[str(chat.id)]
    users = chat_state["users"]

    disp = display_name_from_update(update)
    uname = update.effective_user.username if update.effective_user else None
    idx = _find_user_index(users, disp, uname)
    if idx == -1:
        await update.message.reply_text("–¢–µ–±—è –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ ‚Äî –Ω–µ—á–µ–≥–æ –º–µ–Ω—è—Ç—å.")
        return

    entry = users[idx]
    base = _strip_guest(entry)
    cur_n = _guest_count(entry)
    is_guest_only = _is_guest_only(entry)

    if cur_n == 0:
        await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –≥–æ—Å—Ç–µ–π.")
        return

    if n >= cur_n:
        # —Å–Ω–∏–º–∞–µ–º –≤—Å–µ—Ö –≥–æ—Å—Ç–µ–π
        if is_guest_only:
            del users[idx]  # –±—ã–ª —Ç–æ–ª—å–∫–æ –≥–æ—Å—Ç—å -> –Ω–∏–∫–æ–≥–æ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å
        else:
            users[idx] = base  # –æ—Å—Ç–∞—ë—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ö–æ–∑—è–∏–Ω
        save_state()
        await update.message.reply_text("–£–±—Ä–∞–ª —Ç–≤–æ–∏—Ö –≥–æ—Å—Ç–µ–π üëå\n\n" + format_list(chat_state))
        return

    # –∏–Ω–∞—á–µ —É–º–µ–Ω—å—à–∞–µ–º —Å—á—ë—Ç—á–∏–∫
    new_n = cur_n - n
    users[idx] = _make_entry(base, new_n, is_guest_only)
    save_state()
    await update.message.reply_text(f"–£–±—Ä–∞–ª {n} –≥–æ—Å—Ç—è(–µ–π) üëå\n\n" + format_list(chat_state))

async def minus_one_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await _minus_n_common(update, 1)

async def minus_n_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    m = MINUS_N_PATTERN.match(update.message.text or "")
    n = int(m.group(2)) if m else 0
    if n:
        await _minus_n_common(update, n)

async def handle_member_update(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return

# ---------- main ----------
def main():
    load_state()
    token = os.getenv("BOT_TOKEN")
    if not token:
        raise RuntimeError("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")

    app = ApplicationBuilder().token(token).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("open", open_cmd))
    app.add_handler(CommandHandler("setdate", setdate_cmd))
    app.add_handler(CommandHandler("settime", settime_cmd))
    app.add_handler(CommandHandler("setfield", setfield_cmd))
    app.add_handler(CommandHandler("setlimit", setlimit_cmd))
    app.add_handler(CommandHandler("remove", remove_cmd))
    app.add_handler(CommandHandler("list", list_cmd))
    app.add_handler(CommandHandler("reset", reset_cmd))
    app.add_handler(CommandHandler("close", close_cmd))

    # –ü–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω: —Å–Ω–∞—á–∞–ª–∞ —á–∏—Å–ª–æ–≤—ã–µ, –ø–æ—Ç–æ–º –µ–¥–∏–Ω–∏—á–Ω—ã–µ, –ø–æ—Ç–æ–º –ø—Ä–æ—Å—Ç–æ +/-
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex(PLUS_N_PATTERN), plus_n_message))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex(MINUS_N_PATTERN), minus_n_message))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex(PLUS_ONE_PATTERN), plus_one_message))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex(MINUS_ONE_PATTERN), minus_one_message))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex(PLUS_PATTERN), plus_message))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex(MINUS_PATTERN), minus_message))

    app.add_handler(ChatMemberHandler(handle_member_update, ChatMemberHandler.CHAT_MEMBER))

    print("Bot is running. Press Ctrl+C to stop.")
    app.run_polling()

if __name__ == "__main__":
    try:
        import dotenv
        dotenv.load_dotenv()
    except Exception:
        pass
    main()
