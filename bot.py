import os
import json
import re
from datetime import datetime
from typing import Dict, Any

from telegram import Update, ChatMember
from telegram.constants import ChatType
from telegram.ext import (
    Application, ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters, ChatMemberHandler
)

# ---------- Defaults ----------
DEFAULT_FIELD = "–ì–æ—Ä–∏–∑–æ–Ω—Ç-–∞—Ä–µ–Ω–∞"
DEFAULT_TIME = "20:00-22:00"
STATE_FILE = "state.json"

WEEKDAY_RU = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥",
              "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]

PLUS_PATTERN = re.compile(r"^\s*(\+|‚ûï)\s*$")  
MINUS_PATTERN = re.compile(r"^\s*(-|‚Äî|‚Äì|‚ûñ)\s*$")
PLUS_ONE_PATTERN = re.compile(r"^\s*(\+|‚ûï)\s*1\s*$")
MINUS_ONE_PATTERN = re.compile(r"^\s*(-|‚Äî|‚Äì|‚ûñ)\s*1\s*$")

# ---------- Simple storage ----------
# state per chat_id:
# {
#   "open": bool,
#   "date": "21/09/25",
#   "time": "20:00-22:00",
#   "field": "–ì–æ—Ä–∏–∑–æ–Ω—Ç-–∞—Ä–µ–Ω–∞",
#   "limit": 0,  # 0 = unlimited
#   "users": ["–ò–º—è (@username)", ...]
# }
state: Dict[str, Dict[str, Any]] = {}

def load_state():
    global state
    if os.path.exists(STATE_FILE):
        with open(STATE_FILE, "r", encoding="utf-8") as f:
            state = json.load(f)
    else:
        state = {}

def save_state():
    with open(STATE_FILE, "w", encoding="utf-8") as f:
        json.dump(state, f, ensure_ascii=False, indent=2)

def ensure_chat(chat_id: int):
    cid = str(chat_id)
    if cid not in state:
        state[cid] = {
            "open": False,
            "date": datetime.now().strftime("%d/%m/%y"),
            "time": DEFAULT_TIME,
            "field": DEFAULT_FIELD,
            "limit": 0,
            "users": []
        }

def is_admin_member(member: ChatMember) -> bool:
    return member.status in ("administrator", "creator", "owner")

async def is_admin(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    if update.effective_chat is None or update.effective_user is None:
        return False
    chat = update.effective_chat
    user_id = update.effective_user.id
    try:
        member = await context.bot.get_chat_member(chat.id, user_id)
        return is_admin_member(member)
    except Exception:
        return False

def format_header(chat_state: Dict[str, Any]) -> str:
    # weekday from date
    try:
        d = datetime.strptime(chat_state["date"], "%d/%m/%y")
        weekday = WEEKDAY_RU[d.weekday()]
    except Exception:
        weekday = "?"

    date_str = chat_state["date"]
    field = chat_state.get("field", DEFAULT_FIELD)
    time = chat_state.get("time", DEFAULT_TIME)
    return f"üìÖ {date_str} ({weekday})\nüèüÔ∏è –ü–æ–ª–µ: {field}\n‚è∞ –í—Ä–µ–º—è: {time}"

def format_list(chat_state: Dict[str, Any]) -> str:
    header = format_header(chat_state)
    users = chat_state.get("users", [])
    limit = chat_state.get("limit", 0)

    # ‚Üì –¥–æ–±–∞–≤–ª–µ–Ω–æ
    expanded = _expanded_users(users)
    count = len(expanded)

    if expanded:
        body = "\n".join(f"{i+1}. {u}" for i, u in enumerate(expanded))
    else:
        body = "–ü–æ–∫–∞ –ø—É—Å—Ç–æ. –ü–∏—à–∏ '+' —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è."

    cap = f"\n\n‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç ({limit})." if limit and count >= limit else ""
    status = "–û—Ç–∫—Ä—ã—Ç–æ ‚úÖ" if chat_state.get("open") else "–ó–∞–∫—Ä—ã—Ç–æ ‚õîÔ∏è"
    return f"{header}\n\n–°—Ç–∞—Ç—É—Å: {status}\n–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {count}{cap}\n\n{body}"


def display_name_from_update(update: Update) -> str:
    u = update.effective_user
    if not u:
        return "–ë–µ–∑ –∏–º–µ–Ω–∏"
    name_parts = []
    if u.first_name:
        name_parts.append(u.first_name)
    if u.last_name:
        name_parts.append(u.last_name)
    name = " ".join(name_parts) if name_parts else (u.username or str(u.id))
    if u.username:
        return f"{name} (@{u.username})"
    return name

def parse_date(s: str) -> str:
    datetime.strptime(s, "%d/%m/%y")
    return s

def parse_time(s: str) -> str:
    if re.match(r"^\\d{2}:\\d{2}-\\d{2}:\\d{2}$", s):
        return s
    raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–∏–º–µ—Ä: 20:00-22:00")

def _normalize_entry(entry: str) -> str:
    # "–ò–º—è (@user) +1" -> "–ò–º—è (@user)"
    return entry[:-3].strip() if entry.endswith(" +1") else entry.strip()

def _find_user_index(users, display_name: str, username: str | None):
    dn = display_name.lower().strip()
    un = ("@" + username.lower()) if username else None
    for i, e in enumerate(users):
        el = e.lower()
        if un and un in el:
            return i
        if _normalize_entry(el) == dn:
            return i
    return -1

def _total_count(users) -> int:
    # –°—á–∏—Ç–∞–µ—Ç –ª—é–¥–µ–π —Å —É—á—ë—Ç–æ–º +1
    c = 0
    for e in users:
        c += 1
        if e.endswith(" +1"):
            c += 1
    return c
    
def _expanded_users(users):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: –µ—Å–ª–∏ —É –∑–∞–ø–∏—Å–∏ –µ—Å—Ç—å +1,
    –≤—ã–≤–æ–¥–∏–º –¥–≤–µ —Å—Ç—Ä–æ–∫–∏ ‚Äî –±–∞–∑–æ–≤—É—é –∏ —Ç—É –∂–µ —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º ' +1'."""
    out = []
    for e in users:
        if e.endswith(" +1"):
            base = e[:-3].strip()
            out.append(base)  # –æ—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
            out.append(e)     # –≥–æ—Å—Ç—å –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        else:
            out.append(e)
    return out

# ---------- Commands ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat is None:
        return
    ensure_chat(update.effective_chat.id)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–µ–¥—É —Å–ø–∏—Å–æ–∫ –Ω–∞ —Ñ—É—Ç–±–æ–ª.\n"
        "–£—á–∞—Å—Ç–Ω–∏–∫–∞–º: –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ '+'\n\n"
        "–ê–¥–º–∏–Ω–∞–º:\n"
        "/open [–î–î/–ú–ú/–ì–ì] [–ß–ß:–ú–ú-–ß–ß:–ú–ú]\n"
        "/setdate –î–î/–ú–ú/–ì–ì\n"
        "/settime –ß–ß:–ú–ú-–ß–ß:–ú–ú\n"
        "/setfield –¢–ï–ö–°–¢\n"
        "/setlimit N\n"
        "/remove @username|–ò–º—è\n"
        "/list\n"
        "/reset\n"
        "/close\n"
        "/help"
    )

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start(update, context)

async def open_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat is None:
        return
    if not await is_admin(update, context):
        return
    ensure_chat(update.effective_chat.id)
    chat_state = state[str(update.effective_chat.id)]

    args = context.args
    try:
        if len(args) >= 1:
            chat_state["date"] = parse_date(args[0])
        if len(args) >= 2:
            chat_state["time"] = parse_time(args[1])
        chat_state["open"] = True
        save_state()
        await update.message.reply_text("–ó–∞–ø–∏—Å—å –æ—Ç–∫—Ä—ã—Ç–∞ ‚úÖ\n\n" + format_list(chat_state))
    except ValueError as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

async def setdate_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat is None:
        return
    if not await is_admin(update, context):
        return
    ensure_chat(update.effective_chat.id)
    chat_state = state[str(update.effective_chat.id)]
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É: /setdate –î–î/–ú–ú/–ì–ì")
        return
    try:
        chat_state["date"] = parse_date(context.args[0])
        save_state()
        await update.message.reply_text("–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ ‚úÖ\n\n" + format_list(chat_state))
    except ValueError as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

async def settime_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat is None:
        return
    if not await is_admin(update, context):
        return
    ensure_chat(update.effective_chat.id)
    chat_state = state[str(update.effective_chat.id)]
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è: /settime –ß–ß:–ú–ú-–ß–ß:–ú–ú")
        return
    try:
        chat_state["time"] = parse_time(context.args[0])
        save_state()
        await update.message.reply_text("–í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ\n\n" + format_list(chat_state))
    except ValueError as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

async def setfield_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat is None:
        return
    if not await is_admin(update, context):
        return
    ensure_chat(update.effective_chat.id)
    chat_state = state[str(update.effective_chat.id)]
    text = " ".join(context.args).strip()
    if not text:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è: /setfield –ì–æ—Ä–∏–∑–æ–Ω—Ç-–∞—Ä–µ–Ω–∞")
        return
    chat_state["field"] = text
    save_state()
    await update.message.reply_text("–ü–æ–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ\n\n" + format_list(chat_state))

async def setlimit_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat is None:
        return
    if not await is_admin(update, context):
        return
    ensure_chat(update.effective_chat.id)
    chat_state = state[str(update.effective_chat.id)]
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –ª–∏–º–∏—Ç: /setlimit 28 (0 = –±–µ–∑ –ª–∏–º–∏—Ç–∞)")
        return
    try:
        lim = int(context.args[0])
        chat_state["limit"] = max(0, lim)
        save_state()
        await update.message.reply_text("–õ–∏–º–∏—Ç –æ–±–Ω–æ–≤–ª—ë–Ω ‚úÖ\n\n" + format_list(chat_state))
    except Exception:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü—Ä–∏–º–µ—Ä: /setlimit 28")

async def remove_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat is None:
        return
    if not await is_admin(update, context):
        return
    ensure_chat(update.effective_chat.id)
    chat_state = state[str(update.effective_chat.id)]
    key = " ".join(context.args).strip()
    if not key:
        await update.message.reply_text("–ö–æ–≥–æ —É–±—Ä–∞—Ç—å? /remove @username –∏–ª–∏ /remove –ò–º—è")
        return
    users = chat_state["users"]
    before = len(users)
    users = [u for u in users if key.lower() not in u.lower()]
    chat_state["users"] = users
    save_state()
    removed = before - len(users)
    await update.message.reply_text(f"–£–±—Ä–∞–Ω–æ: {removed}\n\n" + format_list(chat_state))

async def list_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat is None:
        return
    ensure_chat(update.effective_chat.id)
    chat_state = state[str(update.effective_chat.id)]
    await update.message.reply_text(format_list(chat_state))

async def reset_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat is None:
        return
    if not await is_admin(update, context):
        return
    ensure_chat(update.effective_chat.id)
    chat_state = state[str(update.effective_chat.id)]
    chat_state["users"] = []
    save_state()
    await update.message.reply_text("–°–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω üßπ\n\n" + format_list(chat_state))

async def close_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat is None:
        return
    if not await is_admin(update, context):
        return
    ensure_chat(update.effective_chat.id)
    chat_state = state[str(update.effective_chat.id)]
    chat_state["open"] = False
    save_state()
    await update.message.reply_text("–ó–∞–ø–∏—Å—å –∑–∞–∫—Ä—ã—Ç–∞ ‚õîÔ∏è\n\n" + format_list(chat_state))

# '+' handler
async def plus_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat is None or update.message is None:
        return
    if update.effective_chat.type not in (ChatType.GROUP, ChatType.SUPERGROUP):
        return

    ensure_chat(update.effective_chat.id)
    chat_state = state[str(update.effective_chat.id)]
    if not chat_state.get("open", False):
        await update.message.reply_text("–ó–∞–ø–∏—Å—å –∑–∞–∫—Ä—ã—Ç–∞ ‚õîÔ∏è. –ê–¥–º–∏–Ω–∞–º: /open")
        return

    users = chat_state["users"]
    limit = chat_state.get("limit", 0)
    cur = _total_count(users)

    disp = display_name_from_update(update)
    uname = update.effective_user.username if update.effective_user else None

    # —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ?
    idx = _find_user_index(users, disp, uname)
    if idx != -1:
        await update.message.reply_text("–¢—ã —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ ‚úÖ")
        return

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ (+1 —á–µ–ª–æ–≤–µ–∫)
    if limit and cur + 1 > limit:
        await update.message.reply_text(f"‚ö†Ô∏è –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç (–ª–∏–º–∏—Ç {limit}).")
        return

    users.append(disp)
    save_state()
    await update.message.reply_text("–ó–∞–ø–∏—Å–∞–ª! ‚úÖ\n\n" + format_list(chat_state))
    
async def plus_one_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat is None or update.message is None:
        return
    if update.effective_chat.type not in (ChatType.GROUP, ChatType.SUPERGROUP):
        return

    ensure_chat(update.effective_chat.id)
    chat_state = state[str(update.effective_chat.id)]
    if not chat_state.get("open", False):
        await update.message.reply_text("–ó–∞–ø–∏—Å—å –∑–∞–∫—Ä—ã—Ç–∞ ‚õîÔ∏è. –ê–¥–º–∏–Ω–∞–º: /open")
        return

    users = chat_state["users"]
    limit = chat_state.get("limit", 0)
    cur = _total_count(users)

    disp = display_name_from_update(update)
    uname = update.effective_user.username if update.effective_user else None
    idx = _find_user_index(users, disp, uname)

    if idx == -1:
        # –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ ‚Üí —Å—Ä–∞–∑—É "–ò–º—è ... +1" (–∑–∞–Ω–∏–º–∞–µ—Ç 2 –º–µ—Å—Ç–∞)
        if limit and cur + 2 > limit:
            await update.message.reply_text(f"‚ö†Ô∏è –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–µ—Å—Ç –¥–ª—è +1 (–ª–∏–º–∏—Ç {limit}).")
            return
        users.append(f"{disp} +1")
        save_state()
        await update.message.reply_text("–ó–∞–ø–∏—Å–∞–ª —Ç–µ–±—è —Å –¥—Ä—É–≥–æ–º üë•‚úÖ\n\n" + format_list(chat_state))
        return

    # —É–∂–µ –µ—Å—Ç—å ‚Äî –¥–æ–±–∞–≤–∏–º +1 (–∑–∞–Ω–∏–º–∞–µ—Ç +1 –º–µ—Å—Ç–æ)
    if users[idx].endswith(" +1"):
        await update.message.reply_text("–£ —Ç–µ–±—è —É–∂–µ —Å—Ç–æ–∏—Ç +1 üëå")
        return

    if limit and cur + 1 > limit:
        await update.message.reply_text(f"‚ö†Ô∏è –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–µ—Å—Ç –¥–ª—è +1 (–ª–∏–º–∏—Ç {limit}).")
        return

    users[idx] = users[idx] + " +1"
    save_state()
    await update.message.reply_text("–î–æ–±–∞–≤–∏–ª +1 üë•‚úÖ\n\n" + format_list(chat_state))
        
async def minus_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –†–∞–∑—Ä–µ—à–∞–µ–º —É–¥–∞–ª—è—Ç—å —Å–µ–±—è –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–∞–±–æ—Ä –∑–∞–∫—Ä—ã—Ç
    if update.effective_chat is None or update.message is None:
        return
    if update.effective_chat.type not in (ChatType.GROUP, ChatType.SUPERGROUP):
        return

    ensure_chat(update.effective_chat.id)
    chat_state = state[str(update.effective_chat.id)]
    users = chat_state.get("users", [])

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º ¬´—Å–µ–±—è¬ª –ø–æ —Ñ–æ—Ä–º–∞—Ç—É, –∫–æ—Ç–æ—Ä—ã–π –º—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–ø–∏—Å–∫–µ
    name = display_name_from_update(update).lower()
    uname = ("@" + update.effective_user.username).lower() if (update.effective_user and update.effective_user.username) else None

    new_users = []
    removed = 0
    for entry in users:
        el = entry.lower()
        if el == name:
            removed += 1
            continue
        if uname and uname in el:
            removed += 1
            continue
        new_users.append(entry)

    chat_state["users"] = new_users
    save_state()

    if removed:
        await update.message.reply_text("–û–∫, —É–±—Ä–∞–ª —Ç–µ–±—è –∏–∑ —Å–ø–∏—Å–∫–∞ üëå\n\n" + format_list(chat_state))
    else:
        await update.message.reply_text("–¢–µ–±—è –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ —É–¥–∞–ª—è–ª.")

async def minus_one_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat is None or update.message is None:
        return
    if update.effective_chat.type not in (ChatType.GROUP, ChatType.SUPERGROUP):
        return

    ensure_chat(update.effective_chat.id)
    chat_state = state[str(update.effective_chat.id)]
    users = chat_state["users"]

    disp = display_name_from_update(update)
    uname = update.effective_user.username if update.effective_user else None
    idx = _find_user_index(users, disp, uname)

    if idx == -1:
        await update.message.reply_text("–¢–µ–±—è –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ ‚Äî –Ω–µ—á–µ–≥–æ –º–µ–Ω—è—Ç—å.")
        return

    if users[idx].endswith(" +1"):
        users[idx] = _normalize_entry(users[idx])
        save_state()
        await update.message.reply_text("–£–±—Ä–∞–ª —Ç–≤–æ–π +1 üëå\n\n" + format_list(chat_state))
    else:
        await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ –±—ã–ª–æ +1.")

async def handle_member_update(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return

def main():
    load_state()
    token = os.getenv("BOT_TOKEN")
    if not token:
        raise RuntimeError("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")

    app = ApplicationBuilder().token(token).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("open", open_cmd))
    app.add_handler(CommandHandler("setdate", setdate_cmd))
    app.add_handler(CommandHandler("settime", settime_cmd))
    app.add_handler(CommandHandler("setfield", setfield_cmd))
    app.add_handler(CommandHandler("setlimit", setlimit_cmd))
    app.add_handler(CommandHandler("remove", remove_cmd))
    app.add_handler(CommandHandler("list", list_cmd))
    app.add_handler(CommandHandler("reset", reset_cmd))
    app.add_handler(CommandHandler("close", close_cmd))
    
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex(PLUS_ONE_PATTERN), plus_one_message))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex(MINUS_ONE_PATTERN), minus_one_message))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex(PLUS_PATTERN), plus_message))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex(MINUS_PATTERN), minus_message))
    app.add_handler(ChatMemberHandler(handle_member_update, ChatMemberHandler.CHAT_MEMBER))

    print("Bot is running. Press Ctrl+C to stop.")
    # –í–ê–ñ–ù–û: –±–µ–∑ await/asyncio
    app.run_polling()

if __name__ == "__main__":
    try:
        import dotenv
        dotenv.load_dotenv()
    except Exception:
        pass
    main()
